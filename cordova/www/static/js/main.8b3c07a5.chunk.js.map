{"version":3,"sources":["MessageBox.js","MessageThread.js","App.js","serviceWorker.js","index.js"],"names":["MessageBox","props","console","log","state","messageToSend","webSocket","onSubmit","message","context","onInputChange","bind","sendMessage","event","this","preventDefault","json","action","setState","target","value","className","type","onChange","React","Component","MessageThread","isSender","messageText","App","_isMounted","ws","startWebSocket","messageList","Sockette","timeout","maxAttempts","onopen","e","onmessage","generateMessageList","data","generateThread","onreconnect","onmaximum","onclose","onerror","messages","slice","push","key","length","newMessages","forEach","me","undefined","updateThreads","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8b3c07a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './css/MessageBox.css'\r\n\r\nclass MessageBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props);\r\n        this.state = {\r\n            messageToSend: '',\r\n            webSocket: props.webSocket,\r\n            onSubmit: (message) => props.onSubmit(props.context, message)\r\n        }\r\n\r\n        this.onInputChange = this.onInputChange.bind(this);\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n    }\r\n\r\n    sendMessage(event) {\r\n        console.log(this.state.messageToSend);\r\n        event.preventDefault();\r\n        console.log(this.state);\r\n        this.state.onSubmit(this.state.onSubmit(this.state.messageToSend));\r\n        this.state.webSocket.json({\r\n            action: \"default\",\r\n            message: this.state.messageToSend\r\n        });\r\n\r\n    }\r\n\r\n    onInputChange(event) {\r\n        this.setState({\r\n            messageToSend: event.target.value\r\n        })\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"bottom-bar\">\r\n                <form onSubmit={this.sendMessage} className=\"message-box-form\">\r\n                    <input type=\"text\" className=\"message-box\" value={this.state.messageToSend} onChange={this.onInputChange}/>\r\n                    <button type=\"submit\" className=\"message-button\"><span className=\"material-icons\">send</span></button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageBox;","import React from 'react'\r\n\r\nimport './css/MessageThread.css'\r\n\r\nclass MessageThread extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isSender: props.isSender,\r\n            messageText: props.messageText,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"message-thread-container\">\r\n                <div className={`message-thread ${this.state.isSender ? \"me\" : \"other-person\"}`}>\r\n                    {this.state.messageText}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageThread;","import React from 'react';\nimport MessageBox from './MessageBox';\nimport MessageThread from './MessageThread';\n\nimport Sockette from 'sockette'\n\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            ws: this.startWebSocket(),\n            messageList: []\n        }\n    }\n\n    startWebSocket() {\n        const ws = new Sockette('wss://oc9gdrsfcl.execute-api.eu-west-2.amazonaws.com/messaging-test', {\n            timeout: 5e3,\n            maxAttempts: 1,\n            onopen: e => {\n                console.log(\"Connected!\")\n            },\n            onmessage: e => {\n                if(this._isMounted) {\n                    this.generateMessageList(e.data);\n                    this.generateThread(e.data, false);\n                }\n                console.log('Received:', e.data)\n            },\n            onreconnect: e => console.log('Reconnecting...', e),\n            onmaximum: e => console.log('Stop attempting!', e),\n            onclose: e => console.log('Closed!', e),\n            onerror: e => console.log('Error:', e),\n        });\n\n        return ws;\n    }\n\n    generateMessageList(message) {\n        // let messages = this.state.messageList.slice();\n\n        // console.log(messages)\n\n        // messages.push(<MessageList key={messages.length} messageText = {message} isSelected = {false} isRead = {false}/>);\n\n        // console.log(messages)\n\n        // this.setState({\n        //     messageList: messages\n        // })\n    }\n\n\n    generateThread(message, isSender) {\n        let messages = this.state.messageList.slice();\n\n        console.log(messages)\n\n        messages.push(<MessageThread key={messages.length} messageText = {message} isSender = {isSender}/>);\n\n        console.log(messages)\n\n\n        this.setState({\n            messageList: messages\n        })\n    }\n\n    updateMessages() {\n        let messages = this.state.messageList.slice();\n        \n        let newMessages = [];\n\n        messages.forEach(function(message) {\n            newMessages.push()\n        })\n    }\n\n    updateThreads(me, message) {\n        if(message === undefined) {\n            return;\n        }\n        console.log(\"Thread updated\");\n        console.log(message);\n        me.generateThread(message, true);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    render() {\n        return ( \n            <div className=\"thread-view\">\n                {this.state.messageList}\n                {/* <MessageThread \n                    isSender = {false} \n                    messageText=\"Hello world! how are you doing this should overflow onto the next line at some point because it is a big hello to the whole world!\"\n                />\n                <MessageThread \n                    isSender = {true} \n                    messageText=\"Hello world! how are you doing this should overflow onto the next line at some point because it is a big hello to the whole world!\"\n                /> */}\n                <MessageBox\n                    webSocket = {this.state.ws}\n                    onSubmit = {this.updateThreads}\n                    context = {this}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// const ws = new Sockette('wss://oc9gdrsfcl.execute-api.eu-west-2.amazonaws.com/messaging-test', {\n//   timeout: 5e3,\n//   maxAttempts: 1,\n//   onopen: e => {\n//     ReactDOM.render(\n//       <React.StrictMode>\n//         {/* <App /> */}\n//         <MessageBox \n//           webSocket = {ws}\n//         />\n//         <MessageList/>\n//       </React.StrictMode>,\n//       document.getElementById('root')\n//     );\n//     console.log(\"Connected!\")\n//     // ws.json({\n//     //   action: \"default\",\n//     //   message: \"Hello world!\"\n//     // });\n//   },\n//   onmessage: e => {console.log('Received:', e)},\n//   onreconnect: e => console.log('Reconnecting...', e),\n//   onmaximum: e => console.log('Stop attempting!', e),\n//   onclose: e => console.log('Closed!', e),\n//   onerror: e => console.log('Error:', e),\n// });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}